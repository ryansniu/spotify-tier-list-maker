{"version":3,"sources":["config.js","hash.js","components/Player.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","props","backgroundStyles","backgroundImage","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","src","name","artists","is_playing","style","App","state","token","no_data","getCurrentlyPlaying","bind","tick","_token","access_token","this","setState","interval","setInterval","clearInterval","$","type","beforeSend","xhr","setRequestHeader","success","data","logo","alt","href","join","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.692fe16c.chunk.js","sourcesContent":["export const authEndpoint = 'https://accounts.spotify.com/authorize';\r\n\r\n// Replace with your app's client ID, redirect URI and desired scopes\r\nexport const clientId = \"2d6518050da043db89266dc384c2a3c2\";\r\nexport const redirectUri = \"https://ryansniu.github.io/spotify-tier-list-maker/#\";\r\nexport const scopes = [\r\n  \"user-read-currently-playing\",\r\n  \"user-read-playback-state\",\r\n];","// Get the hash of the url\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\n\r\nwindow.location.hash = \"\";\r\n\r\nexport default hash;","import React from \"react\";\r\nimport \"./Player.css\";\r\n\r\nconst Player = props => {\r\n  const backgroundStyles = {\r\n    backgroundImage:`url(${\r\n      props.item.album.images[0].url\r\n    })`,\r\n  };\r\n\r\n  const progressBarStyles = {\r\n    width: (props.progress_ms * 100 / props.item.duration_ms) + '%'\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"main-wrapper\">\r\n        <div className=\"now-playing__img\">\r\n          <img src={props.item.album.images[0].url} />\r\n        </div>\r\n        <div className=\"now-playing__side\">\r\n          <div className=\"now-playing__name\">{props.item.name}</div>\r\n          <div className=\"now-playing__artist\">\r\n            {props.item.artists[0].name}\r\n          </div>\r\n          <div className=\"now-playing__status\">\r\n            {props.is_playing ? \"Playing\" : \"Paused\"}\r\n          </div>\r\n          <div className=\"progress\">\r\n            <div className=\"progress__bar\" style={progressBarStyles} />\r\n          </div>\r\n        </div>\r\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport hash from \"./hash\";\nimport Player from \"./components/Player\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      no_data: false,\n    };\n\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n    }\n\n    // set interval for polling every 5 seconds\n    this.interval = setInterval(() => this.tick(), 5000);\n  }\n\n  componentWillUnmount() {\n    // clear the interval to save resources\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    if(this.state.token) {\n      this.getCurrentlyPlaying(this.state.token);\n    }\n  }\n\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: xhr => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: data => {\n        // Checks if the data is not empty\n        if(!data) {\n          this.setState({\n            no_data: true,\n          });\n          return;\n        }\n\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          no_data: false /* We need to \"reset\" the boolean, in case the\n                            user does not give F5 and has opened his Spotify. */\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && !this.state.no_data && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.state.progress_ms}\n            />\n          )}\n          {this.state.no_data && (\n            <p>\n              You need to be playing a song on Spotify, for something to appear here.\n            </p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}