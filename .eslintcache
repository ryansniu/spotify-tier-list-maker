[{"D:\\GitHub\\spotify-tier-list-maker\\src\\index.js":"1","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\SidebarSearch.js":"2","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Dashboard.js":"3","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\api.js":"4","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\SearchForm.js":"5","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\SearchResult.js":"6","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Header.js":"7","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Loader.js":"8","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\functions.js":"9","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\actions\\result.js":"10","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\AlbumsList.js":"11","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\TracksList.js":"12","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\ArtistsList.js":"13","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\constants.js":"14","D:\\GitHub\\spotify-tier-list-maker\\src\\store\\store.js":"15","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\artists.js":"16","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\tracks.js":"17","D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\albums.js":"18","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\TierList.js":"19","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Column.jsx":"20","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Item.jsx":"21","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Title.jsx":"22","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\ItemPool.jsx":"23","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\TierListContext.js":"24","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\TrashCan.jsx":"25","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\ColumnColorPicker.js":"26"},{"size":596,"mtime":1627707793551,"results":"27","hashOfConfig":"28"},{"size":1951,"mtime":1627520778483,"results":"29","hashOfConfig":"28"},{"size":2406,"mtime":1627709533906,"results":"30","hashOfConfig":"28"},{"size":1055,"mtime":1609409553345,"results":"31","hashOfConfig":"28"},{"size":1099,"mtime":1611381377148,"results":"32","hashOfConfig":"28"},{"size":2128,"mtime":1627006923311,"results":"33","hashOfConfig":"28"},{"size":106,"mtime":1627707655356,"results":"34","hashOfConfig":"28"},{"size":687,"mtime":1609022351770,"results":"35","hashOfConfig":"28"},{"size":571,"mtime":1609208264071,"results":"36","hashOfConfig":"28"},{"size":2208,"mtime":1627006957364,"results":"37","hashOfConfig":"28"},{"size":3219,"mtime":1627701723475,"results":"38","hashOfConfig":"28"},{"size":3202,"mtime":1627512916514,"results":"39","hashOfConfig":"28"},{"size":3039,"mtime":1627701726965,"results":"40","hashOfConfig":"28"},{"size":248,"mtime":1627006883334,"results":"41","hashOfConfig":"28"},{"size":586,"mtime":1627006884816,"results":"42","hashOfConfig":"28"},{"size":443,"mtime":1608873164090,"results":"43","hashOfConfig":"28"},{"size":433,"mtime":1609734140065,"results":"44","hashOfConfig":"28"},{"size":433,"mtime":1608872711015,"results":"45","hashOfConfig":"28"},{"size":16500,"mtime":1627706747621,"results":"46","hashOfConfig":"28"},{"size":2195,"mtime":1627424648400,"results":"47","hashOfConfig":"28"},{"size":2101,"mtime":1627421618236,"results":"48","hashOfConfig":"28"},{"size":4135,"mtime":1627703796850,"results":"49","hashOfConfig":"28"},{"size":1554,"mtime":1626555774126,"results":"50","hashOfConfig":"28"},{"size":1024,"mtime":1627511933831,"results":"51","hashOfConfig":"28"},{"size":1150,"mtime":1627423170231,"results":"52","hashOfConfig":"28"},{"size":368,"mtime":1626990836408,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"5f4kzx",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\GitHub\\spotify-tier-list-maker\\src\\index.js",[],["108","109"],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\SidebarSearch.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Dashboard.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\api.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\SearchForm.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\SearchResult.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Header.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\Loader.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\functions.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\actions\\result.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\AlbumsList.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\TracksList.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\components\\ArtistsList.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\utils\\constants.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\store\\store.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\artists.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\tracks.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\sidebar\\reducers\\albums.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\TierList.js",["110"],"import React from 'react';\r\nimport '@atlaskit/css-reset';\r\nimport styled from 'styled-components';\r\nimport Column from './components/Column';\r\nimport ItemPool from './components/ItemPool';\r\nimport TrashCan from './components/TrashCan';\r\nimport { TierListContext } from './TierListContext';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { Offcanvas } from 'react-bootstrap';\r\nimport { toSvg } from 'html-to-image';\r\nimport SidebarSearch from '../sidebar/SidebarSearch'\r\nimport Header from '../sidebar/components/Header';\r\nimport './tierlist-styles.css';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass InnerList extends React.PureComponent {\r\n  render() {\r\n    const { column, itemMap, index, updateHeader, deleteHandler } = this.props;\r\n    const items = column.itemIds.map(itemId => itemMap[itemId]);\r\n    return <Column column={column} items={items} index={index} updateHeader={updateHeader} deleteHandler={deleteHandler}/>;\r\n  }\r\n}\r\n\r\nlet refreshSidebar = false;\r\nlet refreshColumns = false;\r\nlet showSearchbar = false;\r\nlet showItempool = false;\r\n\r\nclass TierList extends React.Component {\r\n  static contextType = TierListContext;\r\n  state = this.context.data;\r\n\r\n  componentDidMount() {\r\n    this.context.containsItem = (id, type) => {\r\n      if(id in this.state.items) {\r\n        return this.state.items[id]['type'] === type;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    this.context.addToItemPool = (id, type, songURL, imgURL, title, subtitle) => {\r\n      if(this.context.containsItem(id, type)) return; // do nothing\r\n      const newItems = {\r\n        ...this.state.items,\r\n        [id]: {\r\n          id: id,\r\n          type: type,\r\n          songURL: songURL,\r\n          imgURL: imgURL,\r\n          title: title,\r\n          subtitle: subtitle\r\n        }\r\n      }\r\n      const newItemIds = Array.from(this.state.columns['item-pool'].itemIds).concat(id);\r\n      const newItemPool = {\r\n        ...this.state.columns['item-pool'],\r\n        itemIds: newItemIds\r\n      }\r\n      const newState = {\r\n        ...this.state,\r\n        items: newItems,\r\n        columns: {\r\n          ...this.state.columns,\r\n          'item-pool': newItemPool\r\n        }\r\n      };\r\n      this.setState(newState);\r\n    };\r\n    \r\n    this.context.deleteFromItemPool = (id, type) => {\r\n      if(!this.context.containsItem(id, type)) return; // do nothing\r\n      let newItems = this.state.items;\r\n      delete newItems[id];\r\n\r\n      let newColumns = this.state.columns;\r\n      Object.keys(newColumns).forEach(function(key) {\r\n        if(key === 'trash-can') return;\r\n        const delIndex = newColumns[key].itemIds.indexOf(id);\r\n        if(delIndex !== -1) newColumns[key].itemIds.splice(delIndex, 1);\r\n      });\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        items: newItems,\r\n        columns: newColumns\r\n      }\r\n      console.log(newState);\r\n      refreshColumns = !refreshColumns;\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  // uh-oh this might be buggy\r\n  importFromJson = e => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n    fileReader.onload = e => {\r\n      const newState = JSON.parse(e.target.result);\r\n      // check if the required keys exist and the item-pool and trash-can exists in column and has the correct format\r\n      if(!('columnOrder' in newState && 'items' in newState && 'columns' in newState\r\n      && 'item-pool' in newState.columns && 'trash-can' in newState.columns\r\n      && 'id' in newState.columns['item-pool'] && newState.columns['item-pool'].id === 'item-pool'\r\n      && 'itemIds' in newState.columns['item-pool'] && Array.isArray(newState.columns['item-pool'].itemIds)\r\n      && 'id' in newState.columns['trash-can'] && newState.columns['trash-can'].id === 'trash-can')) {\r\n        console.log('missing required information!');\r\n        return;\r\n      }\r\n\r\n      // check if every column has the correct format\r\n      let hasValidColumns = true;\r\n      const requiredColumnKeys = ['id', 'title', 'color', 'itemIds'];\r\n      Object.keys(newState.columns).forEach(function(key) {\r\n        if(!hasValidColumns || key === 'item-pool' || key === 'trash-can') return;\r\n        const columnKeys = Object.keys(newState.columns[key]);\r\n        hasValidColumns = columnKeys.length === requiredColumnKeys.length && columnKeys.every(function(v, i) { return v === requiredColumnKeys[i]});\r\n      });\r\n      if(!hasValidColumns) {\r\n        console.log('missing required column information!');\r\n        return;\r\n      }\r\n\r\n      // check if every column in columnOrder exists in column (and no extra besides item-pool and trash-can)\r\n      const columnOrder = newState.columnOrder;\r\n      let allColumns = Object.keys(newState.columns);\r\n      allColumns.splice(allColumns.indexOf('item-pool'), 1);\r\n      allColumns.splice(allColumns.indexOf('trash-can'), 1);\r\n      if(!(columnOrder.length === allColumns.length && columnOrder.every(el => allColumns.includes(el)))) {\r\n        console.log('columnOrder and columns don\\'t match!');\r\n        return;\r\n      }\r\n\r\n      // check if every item in items has the correct format\r\n      let hasValidItems = true;\r\n      const requiredItemKeys = ['id', 'type', 'songURL', 'imgURL', 'title', 'subtitle'];\r\n      Object.keys(newState.items).forEach(function(key) {\r\n        if(!hasValidItems) return;\r\n        const itemKeys = Object.keys(newState.items[key]);\r\n        hasValidItems = itemKeys.length === requiredItemKeys.length && itemKeys.every(function(v, i) { return v === requiredItemKeys[i]});\r\n      });\r\n      if(!hasValidItems) {\r\n        console.log('missing required item information!');\r\n        return;\r\n      }\r\n\r\n      // check if every itemIDs exists in items (and no extra)\r\n      const allItems = Object.keys(newState.items);\r\n      let itemIds = [];\r\n      Object.keys(newState.columns).forEach(function(key) {\r\n        if(key === 'trash-can') return;\r\n        itemIds = itemIds.concat(newState.columns[key].itemIds);\r\n      });\r\n      if(!(itemIds.length === allItems.length && itemIds.every(el => allItems.includes(el)))) {\r\n        console.log('items and itemIds don\\'t match!');\r\n        return;\r\n      }\r\n\r\n      // success\r\n      refreshSidebar = !refreshSidebar;\r\n      this.setState(newState);\r\n      console.log(this.state);\r\n    };\r\n  }\r\n\r\n  saveAsSVG() {\r\n    toSvg(document.getElementById('tierlist_all'), {backgroundColor: '#121212'})\r\n      .then((dataUrl) => {\r\n        const link = document.createElement('a');\r\n        link.download = 'tierlist.svg';\r\n        link.href = dataUrl;\r\n        link.click();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteItem = (id, source, home) => {\r\n    const homeitemIds = Array.from(home.itemIds);\r\n    homeitemIds.splice(source.index, 1);\r\n    const newHome = {\r\n      ...home,\r\n      itemIds: homeitemIds,\r\n    };\r\n\r\n    const oldItems = this.state.items;\r\n    const newItems = Object.keys(oldItems).reduce((object, key) => {\r\n      if (key !== id) {\r\n        object[key] = oldItems[key];\r\n      }\r\n      return object;\r\n    }, {});\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      items: newItems,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newHome.id]: newHome,\r\n      },\r\n    };\r\n\r\n    refreshSidebar = !refreshSidebar;\r\n    this.setState(newState);\r\n  }\r\n\r\n  updateColHeader = (id, newTitle, newColor) => {\r\n    const oldHeader = this.state.columns[id];\r\n    const newHeader = {\r\n      ...oldHeader,\r\n      title: newTitle,\r\n      color: newColor\r\n    };\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [id]: newHeader\r\n      }\r\n    };\r\n    this.setState(newState);\r\n  }\r\n\r\n  removeCol = (id) => {\r\n    const newColumnOrder = Array.from(this.state.columnOrder);\r\n    newColumnOrder.splice(newColumnOrder.indexOf(id), 1);\r\n\r\n    const oldColumns = this.state.columns;\r\n    const newColumns = Object.keys(oldColumns).reduce((object, key) => {\r\n      if (key !== id) {\r\n        object[key] = oldColumns[key];\r\n      }\r\n      return object;\r\n    }, {});\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: newColumns,\r\n      columnOrder: newColumnOrder,\r\n    };\r\n    this.setState(newState);\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) return;\r\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n    if (type === 'column') {\r\n      const newColumnOrder = Array.from(this.state.columnOrder);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columnOrder: newColumnOrder\r\n      };\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    const home = this.state.columns[source.droppableId];\r\n    const foreign = this.state.columns[destination.droppableId];\r\n    \r\n    if (destination.droppableId === 'trash-can') {\r\n      this.deleteItem(draggableId, source, home);\r\n      return;\r\n    }\r\n\r\n    if (home === foreign) {\r\n      const newitemIds = Array.from(home.itemIds);\r\n      newitemIds.splice(source.index, 1);\r\n      newitemIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newHome = {\r\n        ...home,\r\n        itemIds: newitemIds\r\n      };\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newHome.id]: newHome\r\n        }\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // moving from one list to another\r\n    const homeitemIds = Array.from(home.itemIds);\r\n    homeitemIds.splice(source.index, 1);\r\n    const newHome = {\r\n      ...home,\r\n      itemIds: homeitemIds,\r\n    };\r\n\r\n    const foreignitemIds = Array.from(foreign.itemIds);\r\n    foreignitemIds.splice(destination.index, 0, draggableId);\r\n    const newForeign = {\r\n      ...foreign,\r\n      itemIds: foreignitemIds,\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newHome.id]: newHome,\r\n        [newForeign.id]: newForeign,\r\n      },\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  addNewGroup = () => {\r\n    const ID = `column-${new Date().getTime()}`;\r\n    const newColumnOrder = Array.from(this.state.columnOrder).concat(ID);\r\n    const newState = {\r\n      ...this.state,\r\n      columnOrder: newColumnOrder\r\n    };\r\n    newState['columns'][ID] = {\r\n      id: ID,\r\n      title: 'NEW',\r\n      color: '#1DB954',\r\n      itemIds: [],\r\n    };\r\n    this.setState(newState);\r\n  }\r\n\r\n  resetAllItems = () => {\r\n    let newColumns = this.state.columns;\r\n    Object.keys(newColumns).forEach(function(key) {\r\n      if(key === 'trash-can' || key === 'item-pool') return;\r\n      newColumns['item-pool'].itemIds = newColumns['item-pool'].itemIds.concat(newColumns[key].itemIds);\r\n      newColumns[key].itemIds = [];\r\n    });\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: newColumns\r\n    };\r\n    refreshColumns = !refreshColumns;\r\n    this.setState(newState);\r\n  }\r\n\r\n  removeAllItems = () => {\r\n    this.resetAllItems();\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        'item-pool': {\r\n          id: 'item-pool',\r\n          itemIds: [],\r\n        }\r\n      },\r\n      items: {},\r\n    };\r\n    refreshSidebar = !refreshSidebar;\r\n    this.setState(newState);\r\n  }\r\n\r\n  resetAllColumns = () => {\r\n    this.resetAllItems();\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        'column-1': {\r\n          id: 'column-1',\r\n          title: 'S',\r\n          color: 'purple',\r\n          itemIds: [],\r\n        },\r\n        'column-2': {\r\n          id: 'column-2',\r\n          title: 'A',\r\n          color: '#1DB954',\r\n          itemIds: [],\r\n        },\r\n        'column-3': {\r\n          id: 'column-3',\r\n          title: 'B',\r\n          color: 'blue',\r\n          itemIds: [],\r\n        },\r\n        'column-4': {\r\n          id: 'column-4',\r\n          title: 'C',\r\n          color: 'grey',\r\n          itemIds: [],\r\n        }\r\n      },\r\n      columnOrder: ['column-1', 'column-2', 'column-3','column-4']\r\n    }\r\n    refreshColumns = !refreshColumns;\r\n    this.setState(newState);\r\n  }\r\n\r\n  resetTierList = () => {\r\n    this.resetAllItems();\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        'column-1': {\r\n          id: 'column-1',\r\n          title: 'S',\r\n          color: 'purple',\r\n          itemIds: [],\r\n        },\r\n        'column-2': {\r\n          id: 'column-2',\r\n          title: 'A',\r\n          color: '#1DB954',\r\n          itemIds: [],\r\n        },\r\n        'column-3': {\r\n          id: 'column-3',\r\n          title: 'B',\r\n          color: 'blue',\r\n          itemIds: [],\r\n        },\r\n        'column-4': {\r\n          id: 'column-4',\r\n          title: 'C',\r\n          color: 'grey',\r\n          itemIds: [],\r\n        },\r\n        'item-pool': {\r\n          id: 'item-pool',\r\n          itemIds: [],\r\n        }\r\n      },\r\n      items: {},\r\n      columnOrder: ['column-1', 'column-2', 'column-3','column-4']\r\n    };\r\n    \r\n    refreshColumns = !refreshColumns;\r\n    refreshSidebar = !refreshSidebar;\r\n    this.setState(newState);\r\n  }\r\n\r\n  showSearch = (show) => {\r\n    showSearchbar = show;\r\n    this.setState(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <DragDropContext onDragEnd={this.onDragEnd}>\r\n          <Container>\r\n            <button type=\"button\" onClick={this.addNewGroup}>Add new group</button>\r\n            <button type=\"button\" onClick={this.resetAllItems}>Reset All Items</button>\r\n            <button type=\"button\" onClick={this.removeAllItems}>Remove All Items</button>\r\n            <button type=\"button\" onClick={this.resetAllColumns}>Reset All Columns</button>\r\n            <button type=\"button\" onClick={this.resetTierList}>Reset TierList</button>\r\n            <a\r\n              href={`data:text/json;charset=utf-8,${encodeURIComponent(\r\n                JSON.stringify(this.state)\r\n              )}`}\r\n              download=\"tierlist.json\"\r\n            >\r\n              {`Export as Json`}\r\n            </a>\r\n            <div>\r\n              <label htmlFor=\"import_tierlist\">Import from Json</label>\r\n              <input type=\"file\" id=\"import_tierlist\" name=\"import_tierlist\" accept=\".json\" onChange={this.importFromJson}/>\r\n            </div>\r\n            <button type=\"button\" onClick={this.saveAsSVG}>Save as .svg</button>\r\n            <button type=\"button\" onClick={() => this.showSearch(true)}>Search</button>\r\n          </Container>\r\n\r\n          <Container>\r\n            <Droppable droppableId=\"tiers\" direction=\"horizontal\" type=\"column\">\r\n              {provided => (\r\n                <Container\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  id=\"tierlist_all\"\r\n                  key={refreshColumns}\r\n                >\r\n                  {this.state.columnOrder.map((columnId, index) => {\r\n                    const column = this.state.columns[columnId];\r\n                    return (\r\n                      <InnerList\r\n                        key={column.id}\r\n                        column={column}\r\n                        itemMap={this.state.items}\r\n                        index={index}\r\n                        updateHeader={this.updateColHeader}\r\n                        deleteHandler={this.removeCol}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </Container>\r\n              )}\r\n            </Droppable>\r\n          </Container>\r\n\r\n          <Container>\r\n            <TrashCan />\r\n            <ItemPool items = {this.state.columns['item-pool'].itemIds.map(itemId => this.state.items[itemId])} />\r\n          </Container>\r\n\r\n          <Offcanvas id=\"sidebar-overlay\" show={showSearchbar} onHide={() => this.showSearch(false)} placement={'end'}>\r\n            <Offcanvas.Header closeButton closeVariant='white'>\r\n              <Offcanvas.Title><Header /></Offcanvas.Title>\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body style={{padding: 0, overflowY: 'scroll'}}>\r\n              <SidebarSearch refreshSidebar={refreshSidebar}/>\r\n            </Offcanvas.Body>\r\n          </Offcanvas>\r\n        </DragDropContext>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TierList","D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Column.jsx",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Item.jsx",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\Title.jsx",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\ItemPool.jsx",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\TierListContext.js",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\TrashCan.jsx",[],"D:\\GitHub\\spotify-tier-list-maker\\src\\tierlist\\components\\ColumnColorPicker.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":30,"column":5,"nodeType":"117","messageId":"118","endLine":30,"endColumn":17},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'showItempool' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]